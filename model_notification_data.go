/*
NRF NFManagement Service

NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.2.0-alpha.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NotificationData Data sent in notifications from NRF to subscribed NF Instances
type NotificationData struct {
	Event NotificationEventType `json:"event"`
	// String providing an URI formatted according to RFC 3986
	NfInstanceUri string `json:"nfInstanceUri"`
	NfProfile *NFProfile `json:"nfProfile,omitempty"`
	ProfileChanges *[]ChangeItem `json:"profileChanges,omitempty"`
	ConditionEvent *ConditionEventType `json:"conditionEvent,omitempty"`
}

// NewNotificationData instantiates a new NotificationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationData(event NotificationEventType, nfInstanceUri string) *NotificationData {
	this := NotificationData{}
	return &this
}

// NewNotificationDataWithDefaults instantiates a new NotificationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationDataWithDefaults() *NotificationData {
	this := NotificationData{}
	return &this
}

// GetEvent returns the Event field value
func (o *NotificationData) GetEvent() NotificationEventType {
	if o == nil {
		var ret NotificationEventType
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *NotificationData) GetEventOk() (*NotificationEventType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *NotificationData) SetEvent(v NotificationEventType) {
	o.Event = v
}

// GetNfInstanceUri returns the NfInstanceUri field value
func (o *NotificationData) GetNfInstanceUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NfInstanceUri
}

// GetNfInstanceUriOk returns a tuple with the NfInstanceUri field value
// and a boolean to check if the value has been set.
func (o *NotificationData) GetNfInstanceUriOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NfInstanceUri, true
}

// SetNfInstanceUri sets field value
func (o *NotificationData) SetNfInstanceUri(v string) {
	o.NfInstanceUri = v
}

// GetNfProfile returns the NfProfile field value if set, zero value otherwise.
func (o *NotificationData) GetNfProfile() NFProfile {
	if o == nil || o.NfProfile == nil {
		var ret NFProfile
		return ret
	}
	return *o.NfProfile
}

// GetNfProfileOk returns a tuple with the NfProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationData) GetNfProfileOk() (*NFProfile, bool) {
	if o == nil || o.NfProfile == nil {
		return nil, false
	}
	return o.NfProfile, true
}

// HasNfProfile returns a boolean if a field has been set.
func (o *NotificationData) HasNfProfile() bool {
	if o != nil && o.NfProfile != nil {
		return true
	}

	return false
}

// SetNfProfile gets a reference to the given NFProfile and assigns it to the NfProfile field.
func (o *NotificationData) SetNfProfile(v NFProfile) {
	o.NfProfile = &v
}

// GetProfileChanges returns the ProfileChanges field value if set, zero value otherwise.
func (o *NotificationData) GetProfileChanges() []ChangeItem {
	if o == nil || o.ProfileChanges == nil {
		var ret []ChangeItem
		return ret
	}
	return *o.ProfileChanges
}

// GetProfileChangesOk returns a tuple with the ProfileChanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationData) GetProfileChangesOk() (*[]ChangeItem, bool) {
	if o == nil || o.ProfileChanges == nil {
		return nil, false
	}
	return o.ProfileChanges, true
}

// HasProfileChanges returns a boolean if a field has been set.
func (o *NotificationData) HasProfileChanges() bool {
	if o != nil && o.ProfileChanges != nil {
		return true
	}

	return false
}

// SetProfileChanges gets a reference to the given []ChangeItem and assigns it to the ProfileChanges field.
func (o *NotificationData) SetProfileChanges(v []ChangeItem) {
	o.ProfileChanges = &v
}

// GetConditionEvent returns the ConditionEvent field value if set, zero value otherwise.
func (o *NotificationData) GetConditionEvent() ConditionEventType {
	if o == nil || o.ConditionEvent == nil {
		var ret ConditionEventType
		return ret
	}
	return *o.ConditionEvent
}

// GetConditionEventOk returns a tuple with the ConditionEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationData) GetConditionEventOk() (*ConditionEventType, bool) {
	if o == nil || o.ConditionEvent == nil {
		return nil, false
	}
	return o.ConditionEvent, true
}

// HasConditionEvent returns a boolean if a field has been set.
func (o *NotificationData) HasConditionEvent() bool {
	if o != nil && o.ConditionEvent != nil {
		return true
	}

	return false
}

// SetConditionEvent gets a reference to the given ConditionEventType and assigns it to the ConditionEvent field.
func (o *NotificationData) SetConditionEvent(v ConditionEventType) {
	o.ConditionEvent = &v
}

func (o NotificationData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["event"] = o.Event
	}
	if true {
		toSerialize["nfInstanceUri"] = o.NfInstanceUri
	}
	if o.NfProfile != nil {
		toSerialize["nfProfile"] = o.NfProfile
	}
	if o.ProfileChanges != nil {
		toSerialize["profileChanges"] = o.ProfileChanges
	}
	if o.ConditionEvent != nil {
		toSerialize["conditionEvent"] = o.ConditionEvent
	}
	return json.Marshal(toSerialize)
}

type NullableNotificationData struct {
	value *NotificationData
	isSet bool
}

func (v NullableNotificationData) Get() *NotificationData {
	return v.value
}

func (v *NullableNotificationData) Set(val *NotificationData) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationData) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationData(val *NotificationData) *NullableNotificationData {
	return &NullableNotificationData{value: val, isSet: true}
}

func (v NullableNotificationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


