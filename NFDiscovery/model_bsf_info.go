/*
NRF NFDiscovery Service

NRF NFDiscovery Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.2.0-alpha.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BsfInfo Information of a BSF NF Instance
type BsfInfo struct {
	DnnList *[]string `json:"dnnList,omitempty"`
	IpDomainList *[]string `json:"ipDomainList,omitempty"`
	Ipv4AddressRanges *[]Ipv4AddressRange `json:"ipv4AddressRanges,omitempty"`
	Ipv6PrefixRanges *[]Ipv6PrefixRange `json:"ipv6PrefixRanges,omitempty"`
	// string containing an FQDN or realm as defined in RFC 6733.
	RxDiamHost *string `json:"rxDiamHost,omitempty"`
	// string containing an FQDN or realm as defined in RFC 6733.
	RxDiamRealm *string `json:"rxDiamRealm,omitempty"`
}

// NewBsfInfo instantiates a new BsfInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBsfInfo() *BsfInfo {
	this := BsfInfo{}
	return &this
}

// NewBsfInfoWithDefaults instantiates a new BsfInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBsfInfoWithDefaults() *BsfInfo {
	this := BsfInfo{}
	return &this
}

// GetDnnList returns the DnnList field value if set, zero value otherwise.
func (o *BsfInfo) GetDnnList() []string {
	if o == nil || o.DnnList == nil {
		var ret []string
		return ret
	}
	return *o.DnnList
}

// GetDnnListOk returns a tuple with the DnnList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BsfInfo) GetDnnListOk() (*[]string, bool) {
	if o == nil || o.DnnList == nil {
		return nil, false
	}
	return o.DnnList, true
}

// HasDnnList returns a boolean if a field has been set.
func (o *BsfInfo) HasDnnList() bool {
	if o != nil && o.DnnList != nil {
		return true
	}

	return false
}

// SetDnnList gets a reference to the given []string and assigns it to the DnnList field.
func (o *BsfInfo) SetDnnList(v []string) {
	o.DnnList = &v
}

// GetIpDomainList returns the IpDomainList field value if set, zero value otherwise.
func (o *BsfInfo) GetIpDomainList() []string {
	if o == nil || o.IpDomainList == nil {
		var ret []string
		return ret
	}
	return *o.IpDomainList
}

// GetIpDomainListOk returns a tuple with the IpDomainList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BsfInfo) GetIpDomainListOk() (*[]string, bool) {
	if o == nil || o.IpDomainList == nil {
		return nil, false
	}
	return o.IpDomainList, true
}

// HasIpDomainList returns a boolean if a field has been set.
func (o *BsfInfo) HasIpDomainList() bool {
	if o != nil && o.IpDomainList != nil {
		return true
	}

	return false
}

// SetIpDomainList gets a reference to the given []string and assigns it to the IpDomainList field.
func (o *BsfInfo) SetIpDomainList(v []string) {
	o.IpDomainList = &v
}

// GetIpv4AddressRanges returns the Ipv4AddressRanges field value if set, zero value otherwise.
func (o *BsfInfo) GetIpv4AddressRanges() []Ipv4AddressRange {
	if o == nil || o.Ipv4AddressRanges == nil {
		var ret []Ipv4AddressRange
		return ret
	}
	return *o.Ipv4AddressRanges
}

// GetIpv4AddressRangesOk returns a tuple with the Ipv4AddressRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BsfInfo) GetIpv4AddressRangesOk() (*[]Ipv4AddressRange, bool) {
	if o == nil || o.Ipv4AddressRanges == nil {
		return nil, false
	}
	return o.Ipv4AddressRanges, true
}

// HasIpv4AddressRanges returns a boolean if a field has been set.
func (o *BsfInfo) HasIpv4AddressRanges() bool {
	if o != nil && o.Ipv4AddressRanges != nil {
		return true
	}

	return false
}

// SetIpv4AddressRanges gets a reference to the given []Ipv4AddressRange and assigns it to the Ipv4AddressRanges field.
func (o *BsfInfo) SetIpv4AddressRanges(v []Ipv4AddressRange) {
	o.Ipv4AddressRanges = &v
}

// GetIpv6PrefixRanges returns the Ipv6PrefixRanges field value if set, zero value otherwise.
func (o *BsfInfo) GetIpv6PrefixRanges() []Ipv6PrefixRange {
	if o == nil || o.Ipv6PrefixRanges == nil {
		var ret []Ipv6PrefixRange
		return ret
	}
	return *o.Ipv6PrefixRanges
}

// GetIpv6PrefixRangesOk returns a tuple with the Ipv6PrefixRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BsfInfo) GetIpv6PrefixRangesOk() (*[]Ipv6PrefixRange, bool) {
	if o == nil || o.Ipv6PrefixRanges == nil {
		return nil, false
	}
	return o.Ipv6PrefixRanges, true
}

// HasIpv6PrefixRanges returns a boolean if a field has been set.
func (o *BsfInfo) HasIpv6PrefixRanges() bool {
	if o != nil && o.Ipv6PrefixRanges != nil {
		return true
	}

	return false
}

// SetIpv6PrefixRanges gets a reference to the given []Ipv6PrefixRange and assigns it to the Ipv6PrefixRanges field.
func (o *BsfInfo) SetIpv6PrefixRanges(v []Ipv6PrefixRange) {
	o.Ipv6PrefixRanges = &v
}

// GetRxDiamHost returns the RxDiamHost field value if set, zero value otherwise.
func (o *BsfInfo) GetRxDiamHost() string {
	if o == nil || o.RxDiamHost == nil {
		var ret string
		return ret
	}
	return *o.RxDiamHost
}

// GetRxDiamHostOk returns a tuple with the RxDiamHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BsfInfo) GetRxDiamHostOk() (*string, bool) {
	if o == nil || o.RxDiamHost == nil {
		return nil, false
	}
	return o.RxDiamHost, true
}

// HasRxDiamHost returns a boolean if a field has been set.
func (o *BsfInfo) HasRxDiamHost() bool {
	if o != nil && o.RxDiamHost != nil {
		return true
	}

	return false
}

// SetRxDiamHost gets a reference to the given string and assigns it to the RxDiamHost field.
func (o *BsfInfo) SetRxDiamHost(v string) {
	o.RxDiamHost = &v
}

// GetRxDiamRealm returns the RxDiamRealm field value if set, zero value otherwise.
func (o *BsfInfo) GetRxDiamRealm() string {
	if o == nil || o.RxDiamRealm == nil {
		var ret string
		return ret
	}
	return *o.RxDiamRealm
}

// GetRxDiamRealmOk returns a tuple with the RxDiamRealm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BsfInfo) GetRxDiamRealmOk() (*string, bool) {
	if o == nil || o.RxDiamRealm == nil {
		return nil, false
	}
	return o.RxDiamRealm, true
}

// HasRxDiamRealm returns a boolean if a field has been set.
func (o *BsfInfo) HasRxDiamRealm() bool {
	if o != nil && o.RxDiamRealm != nil {
		return true
	}

	return false
}

// SetRxDiamRealm gets a reference to the given string and assigns it to the RxDiamRealm field.
func (o *BsfInfo) SetRxDiamRealm(v string) {
	o.RxDiamRealm = &v
}

func (o BsfInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DnnList != nil {
		toSerialize["dnnList"] = o.DnnList
	}
	if o.IpDomainList != nil {
		toSerialize["ipDomainList"] = o.IpDomainList
	}
	if o.Ipv4AddressRanges != nil {
		toSerialize["ipv4AddressRanges"] = o.Ipv4AddressRanges
	}
	if o.Ipv6PrefixRanges != nil {
		toSerialize["ipv6PrefixRanges"] = o.Ipv6PrefixRanges
	}
	if o.RxDiamHost != nil {
		toSerialize["rxDiamHost"] = o.RxDiamHost
	}
	if o.RxDiamRealm != nil {
		toSerialize["rxDiamRealm"] = o.RxDiamRealm
	}
	return json.Marshal(toSerialize)
}

type NullableBsfInfo struct {
	value *BsfInfo
	isSet bool
}

func (v NullableBsfInfo) Get() *BsfInfo {
	return v.value
}

func (v *NullableBsfInfo) Set(val *BsfInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBsfInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBsfInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBsfInfo(val *BsfInfo) *NullableBsfInfo {
	return &NullableBsfInfo{value: val, isSet: true}
}

func (v NullableBsfInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBsfInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


