/*
NRF NFDiscovery Service

NRF NFDiscovery Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.2.0-alpha.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// IpAddr - Contains an IP adresse.
type IpAddr struct {
	interface{} *interface{}
}

// interface{}AsIpAddr is a convenience function that returns interface{} wrapped in IpAddr
func interface{}AsIpAddr(v *interface{}) IpAddr {
	return IpAddr{ interface{}: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *IpAddr) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into interface{}
	err = json.Unmarshal(data, &dst.interface{})
	if err == nil {
		jsoninterface{}, _ := json.Marshal(dst.interface{})
		if string(jsoninterface{}) == "{}" { // empty struct
			dst.interface{} = nil
		} else {
			match++
		}
	} else {
		dst.interface{} = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.interface{} = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(IpAddr)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(IpAddr)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IpAddr) MarshalJSON() ([]byte, error) {
	if src.interface{} != nil {
		return json.Marshal(&src.interface{})
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IpAddr) GetActualInstance() (interface{}) {
	if obj.interface{} != nil {
		return obj.interface{}
	}

	// all schemas are nil
	return nil
}

type NullableIpAddr struct {
	value *IpAddr
	isSet bool
}

func (v NullableIpAddr) Get() *IpAddr {
	return v.value
}

func (v *NullableIpAddr) Set(val *IpAddr) {
	v.value = val
	v.isSet = true
}

func (v NullableIpAddr) IsSet() bool {
	return v.isSet
}

func (v *NullableIpAddr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpAddr(val *IpAddr) *NullableIpAddr {
	return &NullableIpAddr{value: val, isSet: true}
}

func (v NullableIpAddr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpAddr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


