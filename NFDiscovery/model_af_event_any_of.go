/*
NRF NFDiscovery Service

NRF NFDiscovery Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.2.0-alpha.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AfEventAnyOf the model 'AfEventAnyOf'
type AfEventAnyOf string

// List of AfEvent_anyOf
const (
	SVC_EXPERIENCE AfEventAnyOf = "SVC_EXPERIENCE"
	UE_MOBILITY AfEventAnyOf = "UE_MOBILITY"
	UE_COMM AfEventAnyOf = "UE_COMM"
	EXCEPTIONS AfEventAnyOf = "EXCEPTIONS"
	USER_DATA_CONGESTION AfEventAnyOf = "USER_DATA_CONGESTION"
	PERF_DATA AfEventAnyOf = "PERF_DATA"
	DISPERSION AfEventAnyOf = "DISPERSION"
)

var allowedAfEventAnyOfEnumValues = []AfEventAnyOf{
	"SVC_EXPERIENCE",
	"UE_MOBILITY",
	"UE_COMM",
	"EXCEPTIONS",
	"USER_DATA_CONGESTION",
	"PERF_DATA",
	"DISPERSION",
}

func (v *AfEventAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AfEventAnyOf(value)
	for _, existing := range allowedAfEventAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AfEventAnyOf", value)
}

// NewAfEventAnyOfFromValue returns a pointer to a valid AfEventAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAfEventAnyOfFromValue(v string) (*AfEventAnyOf, error) {
	ev := AfEventAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AfEventAnyOf: valid values are %v", v, allowedAfEventAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AfEventAnyOf) IsValid() bool {
	for _, existing := range allowedAfEventAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AfEvent_anyOf value
func (v AfEventAnyOf) Ptr() *AfEventAnyOf {
	return &v
}

type NullableAfEventAnyOf struct {
	value *AfEventAnyOf
	isSet bool
}

func (v NullableAfEventAnyOf) Get() *AfEventAnyOf {
	return v.value
}

func (v *NullableAfEventAnyOf) Set(val *AfEventAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAfEventAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAfEventAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAfEventAnyOf(val *AfEventAnyOf) *NullableAfEventAnyOf {
	return &NullableAfEventAnyOf{value: val, isSet: true}
}

func (v NullableAfEventAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAfEventAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

