/*
NRF NFManagement Service

NRF NFManagement Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.2.0-alpha.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// NotificationEventTypeAnyOf the model 'NotificationEventTypeAnyOf'
type NotificationEventTypeAnyOf string

// List of NotificationEventType_anyOf
const (
	REGISTERED NotificationEventTypeAnyOf = "NF_REGISTERED"
	DEREGISTERED NotificationEventTypeAnyOf = "NF_DEREGISTERED"
	PROFILE_CHANGED NotificationEventTypeAnyOf = "NF_PROFILE_CHANGED"
)

var allowedNotificationEventTypeAnyOfEnumValues = []NotificationEventTypeAnyOf{
	"NF_REGISTERED",
	"NF_DEREGISTERED",
	"NF_PROFILE_CHANGED",
}

func (v *NotificationEventTypeAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NotificationEventTypeAnyOf(value)
	for _, existing := range allowedNotificationEventTypeAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NotificationEventTypeAnyOf", value)
}

// NewNotificationEventTypeAnyOfFromValue returns a pointer to a valid NotificationEventTypeAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNotificationEventTypeAnyOfFromValue(v string) (*NotificationEventTypeAnyOf, error) {
	ev := NotificationEventTypeAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NotificationEventTypeAnyOf: valid values are %v", v, allowedNotificationEventTypeAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NotificationEventTypeAnyOf) IsValid() bool {
	for _, existing := range allowedNotificationEventTypeAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NotificationEventType_anyOf value
func (v NotificationEventTypeAnyOf) Ptr() *NotificationEventTypeAnyOf {
	return &v
}

type NullableNotificationEventTypeAnyOf struct {
	value *NotificationEventTypeAnyOf
	isSet bool
}

func (v NullableNotificationEventTypeAnyOf) Get() *NotificationEventTypeAnyOf {
	return v.value
}

func (v *NullableNotificationEventTypeAnyOf) Set(val *NotificationEventTypeAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationEventTypeAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationEventTypeAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationEventTypeAnyOf(val *NotificationEventTypeAnyOf) *NullableNotificationEventTypeAnyOf {
	return &NullableNotificationEventTypeAnyOf{value: val, isSet: true}
}

func (v NullableNotificationEventTypeAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationEventTypeAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

