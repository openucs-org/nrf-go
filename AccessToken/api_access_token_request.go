/*
NRF OAuth2

NRF OAuth2 Authorization. © 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.2.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// AccessTokenRequestApiService AccessTokenRequestApi service
type AccessTokenRequestApiService service

type ApiAccessTokenRequestRequest struct {
	ctx _context.Context
	ApiService *AccessTokenRequestApiService
	grantType *string
	nfInstanceId *string
	scope *string
	contentEncoding *string
	acceptEncoding *string
	nfType *NFType
	targetNfType *NFType
	targetNfInstanceId *string
	requesterPlmn *PlmnId
	requesterPlmnList *[]PlmnId
	requesterSnssaiList *[]Snssai
	requesterFqdn *string
	requesterSnpnList *[]PlmnIdNid
	targetPlmn *PlmnId
	targetSnssaiList *[]Snssai
	targetNsiList *[]string
	targetNfSetId *string
	targetNfServiceSetId *string
	hnrfAccessTokenUri *string
}

func (r ApiAccessTokenRequestRequest) GrantType(grantType string) ApiAccessTokenRequestRequest {
	r.grantType = &grantType
	return r
}
// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.
func (r ApiAccessTokenRequestRequest) NfInstanceId(nfInstanceId string) ApiAccessTokenRequestRequest {
	r.nfInstanceId = &nfInstanceId
	return r
}
func (r ApiAccessTokenRequestRequest) Scope(scope string) ApiAccessTokenRequestRequest {
	r.scope = &scope
	return r
}
// Content-Encoding, described in IETF RFC 7231
func (r ApiAccessTokenRequestRequest) ContentEncoding(contentEncoding string) ApiAccessTokenRequestRequest {
	r.contentEncoding = &contentEncoding
	return r
}
// Accept-Encoding, described in IETF RFC 7231
func (r ApiAccessTokenRequestRequest) AcceptEncoding(acceptEncoding string) ApiAccessTokenRequestRequest {
	r.acceptEncoding = &acceptEncoding
	return r
}
func (r ApiAccessTokenRequestRequest) NfType(nfType NFType) ApiAccessTokenRequestRequest {
	r.nfType = &nfType
	return r
}
func (r ApiAccessTokenRequestRequest) TargetNfType(targetNfType NFType) ApiAccessTokenRequestRequest {
	r.targetNfType = &targetNfType
	return r
}
// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.
func (r ApiAccessTokenRequestRequest) TargetNfInstanceId(targetNfInstanceId string) ApiAccessTokenRequestRequest {
	r.targetNfInstanceId = &targetNfInstanceId
	return r
}
func (r ApiAccessTokenRequestRequest) RequesterPlmn(requesterPlmn PlmnId) ApiAccessTokenRequestRequest {
	r.requesterPlmn = &requesterPlmn
	return r
}
func (r ApiAccessTokenRequestRequest) RequesterPlmnList(requesterPlmnList []PlmnId) ApiAccessTokenRequestRequest {
	r.requesterPlmnList = &requesterPlmnList
	return r
}
func (r ApiAccessTokenRequestRequest) RequesterSnssaiList(requesterSnssaiList []Snssai) ApiAccessTokenRequestRequest {
	r.requesterSnssaiList = &requesterSnssaiList
	return r
}
// Fully Qualified Domain Name
func (r ApiAccessTokenRequestRequest) RequesterFqdn(requesterFqdn string) ApiAccessTokenRequestRequest {
	r.requesterFqdn = &requesterFqdn
	return r
}
func (r ApiAccessTokenRequestRequest) RequesterSnpnList(requesterSnpnList []PlmnIdNid) ApiAccessTokenRequestRequest {
	r.requesterSnpnList = &requesterSnpnList
	return r
}
func (r ApiAccessTokenRequestRequest) TargetPlmn(targetPlmn PlmnId) ApiAccessTokenRequestRequest {
	r.targetPlmn = &targetPlmn
	return r
}
func (r ApiAccessTokenRequestRequest) TargetSnssaiList(targetSnssaiList []Snssai) ApiAccessTokenRequestRequest {
	r.targetSnssaiList = &targetSnssaiList
	return r
}
func (r ApiAccessTokenRequestRequest) TargetNsiList(targetNsiList []string) ApiAccessTokenRequestRequest {
	r.targetNsiList = &targetNsiList
	return r
}
// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \\\&quot; set&lt;Set ID&gt;.&lt;nftype&gt;set.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\\\&quot;, or \\\&quot;set&lt;SetID&gt;. &lt;NFType&gt;set.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\\\&quot; with &lt;MCC&gt; encoded as defined in clause 5.4.2 (\\\&quot;Mcc\\\&quot; data type definition) &lt;MNC&gt; encoded as defined in clause 5.4.2 (\\\&quot;Mnc\\\&quot; data type definition) &lt;NFType&gt; encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but with lower case characters &lt;Set ID&gt; encoded as a string of characters consisting of alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that shall end with either an alphabetic character or a digit.
func (r ApiAccessTokenRequestRequest) TargetNfSetId(targetNfSetId string) ApiAccessTokenRequestRequest {
	r.targetNfSetId = &targetNfSetId
	return r
}
// NF Service Set Identifier (see clause 28.12 of 3GPP TS 23.003) formatted as the following string  \\\&quot; set&lt;Set ID&gt;.sn&lt;Service Name&gt;.nfi&lt;NF Instance ID&gt;.5gc.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\\\&quot;&gt;\\\&quot;, or \\\&quot;set&lt;SetID&gt;.sn&lt;ServiceName&gt;.nfi&lt;NFInstanceID&gt;.5gc.nid&lt;NID&gt;.mnc&lt;MNC&gt;.mcc&lt;MCC&gt;\\\&quot; with &lt;MCC&gt; encoded as defined in clause 5.4.2 (\\\&quot;Mcc\\\&quot; data type definition)  &lt;MNC&gt; encoded as defined in clause 5.4.2 (\\\&quot;Mnc\\\&quot; data type definition)  &lt;NID&gt; encoded as defined in clause 5.4.2 (\\\&quot;Nid\\\&quot; data type definition) &lt;NFInstanceId&gt; encoded as defined in clause 5.3.2 &lt;ServiceName&gt; encoded as defined in 3GPP TS 29.510 &lt;Set ID&gt; encoded as a string of characters consisting of alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that shall end with either an alphabetic character or a digit.
func (r ApiAccessTokenRequestRequest) TargetNfServiceSetId(targetNfServiceSetId string) ApiAccessTokenRequestRequest {
	r.targetNfServiceSetId = &targetNfServiceSetId
	return r
}
// String providing an URI formatted according to RFC 3986
func (r ApiAccessTokenRequestRequest) HnrfAccessTokenUri(hnrfAccessTokenUri string) ApiAccessTokenRequestRequest {
	r.hnrfAccessTokenUri = &hnrfAccessTokenUri
	return r
}

func (r ApiAccessTokenRequestRequest) Execute() (AccessTokenRsp, *_nethttp.Response, error) {
	return r.ApiService.AccessTokenRequestExecute(r)
}

/*
AccessTokenRequest Access Token Request

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAccessTokenRequestRequest
*/
func (a *AccessTokenRequestApiService) AccessTokenRequest(ctx _context.Context) ApiAccessTokenRequestRequest {
	return ApiAccessTokenRequestRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccessTokenRsp
func (a *AccessTokenRequestApiService) AccessTokenRequestExecute(r ApiAccessTokenRequestRequest) (AccessTokenRsp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AccessTokenRsp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccessTokenRequestApiService.AccessTokenRequest")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth2/token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.grantType == nil {
		return localVarReturnValue, nil, reportError("grantType is required and must be specified")
	}
	if r.nfInstanceId == nil {
		return localVarReturnValue, nil, reportError("nfInstanceId is required and must be specified")
	}
	if r.scope == nil {
		return localVarReturnValue, nil, reportError("scope is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.contentEncoding != nil {
		localVarHeaderParams["Content-Encoding"] = parameterToString(*r.contentEncoding, "")
	}
	if r.acceptEncoding != nil {
		localVarHeaderParams["Accept-Encoding"] = parameterToString(*r.acceptEncoding, "")
	}
	localVarFormParams.Add("grant_type", parameterToString(*r.grantType, ""))
	localVarFormParams.Add("nfInstanceId", parameterToString(*r.nfInstanceId, ""))
	if r.nfType != nil {
		paramJson, err := parameterToJson(*r.nfType)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("nfType", paramJson)
	}
	if r.targetNfType != nil {
		paramJson, err := parameterToJson(*r.targetNfType)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("targetNfType", paramJson)
	}
	localVarFormParams.Add("scope", parameterToString(*r.scope, ""))
	if r.targetNfInstanceId != nil {
		localVarFormParams.Add("targetNfInstanceId", parameterToString(*r.targetNfInstanceId, ""))
	}
	if r.requesterPlmn != nil {
		paramJson, err := parameterToJson(*r.requesterPlmn)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("requesterPlmn", paramJson)
	}
	if r.requesterPlmnList != nil {
		paramJson, err := parameterToJson(*r.requesterPlmnList)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("requesterPlmnList", paramJson)
	}
	if r.requesterSnssaiList != nil {
		paramJson, err := parameterToJson(*r.requesterSnssaiList)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("requesterSnssaiList", paramJson)
	}
	if r.requesterFqdn != nil {
		localVarFormParams.Add("requesterFqdn", parameterToString(*r.requesterFqdn, ""))
	}
	if r.requesterSnpnList != nil {
		paramJson, err := parameterToJson(*r.requesterSnpnList)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("requesterSnpnList", paramJson)
	}
	if r.targetPlmn != nil {
		paramJson, err := parameterToJson(*r.targetPlmn)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("targetPlmn", paramJson)
	}
	if r.targetSnssaiList != nil {
		paramJson, err := parameterToJson(*r.targetSnssaiList)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("targetSnssaiList", paramJson)
	}
	if r.targetNsiList != nil {
		localVarFormParams.Add("targetNsiList", parameterToString(*r.targetNsiList, "csv"))
	}
	if r.targetNfSetId != nil {
		localVarFormParams.Add("targetNfSetId", parameterToString(*r.targetNfSetId, ""))
	}
	if r.targetNfServiceSetId != nil {
		localVarFormParams.Add("targetNfServiceSetId", parameterToString(*r.targetNfServiceSetId, ""))
	}
	if r.hnrfAccessTokenUri != nil {
		localVarFormParams.Add("hnrfAccessTokenUri", parameterToString(*r.hnrfAccessTokenUri, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 307 {
			var v RedirectResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 308 {
			var v RedirectResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v AccessTokenErr
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 411 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 413 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
